name: build

on:
  workflow_dispatch:
    inputs:
      version:
        description: '要发布的版本号'
        required: true

permissions:
  contents: write

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          body: |
            New release: ${{ github.event.inputs.version }}
          draft: false
          prerelease: false

  build:
    needs: create_release
    strategy:
      matrix:
        include:
          # Windows builds
          - goos: windows
            goarch: amd64
            goamd64: v1
          - goos: windows
            goarch: amd64
            goamd64: v3
          - goos: windows
            goarch: 386
          # Linux builds
          - goos: linux
            goarch: amd64
            goamd64: v1
          - goos: linux
            goarch: amd64
            goamd64: v3
          - goos: linux
            goarch: 386

    runs-on: ubuntu-latest
    env:
      CGO_ENABLED: 0

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '^1.20'
        check-latest: true

    - name: Tidy up Go Modules
      run: go mod tidy

    - name: Get Git Commit Hash
      id: hash
      run: echo "git_hash=$(git rev-parse --short HEAD || echo "unknown")" >> $GITHUB_OUTPUT

    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        GOAMD64: ${{ matrix.goamd64 }}
      run: |
        version_tag="${{ github.event.inputs.version }}"
        output_name="NoDelay-${version_tag}-${GOOS}-${GOARCH}"
        [ -n "${GOAMD64}" ] && output_name="${output_name}-${GOAMD64}"
        [ "${GOOS}" = "windows" ] && output_name="${output_name}.exe"
        
        go build -v -trimpath \
          -ldflags "-X \"github.com/InRaining/NoDelay/version.CommitHash=${{ steps.hash.outputs.git_hash }}\" -X \"github.com/InRaining/NoDelay/version.Version=${version_tag}\" -s -w -buildid=" \
          -o "${output_name}"

    - name: Install UPX
      run: sudo apt-get update && sudo apt-get install -y upx

    - name: Compress with UPX
      run: |
        version_tag="${{ github.event.inputs.version }}"
        binary_name="NoDelay-${version_tag}-${{ matrix.goos }}-${{ matrix.goarch }}"
        [ -n "${{ matrix.goamd64 }}" ] && binary_name="${binary_name}-${{ matrix.goamd64 }}"
        [ "${{ matrix.goos }}" = "windows" ] && binary_name="${binary_name}.exe"
        
        echo "Compressing ${binary_name} with UPX..."
        upx --best --lzma "${binary_name}"

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./NoDelay-${{ github.event.inputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goamd64 && format('-{0}', matrix.goamd64) || '' }}${{ matrix.goos == 'windows' && '.exe' || '' }}
        asset_name: NoDelay-${{ github.event.inputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goamd64 && format('-{0}', matrix.goamd64) || '' }}${{ matrix.goos == 'windows' && '.exe' || '' }}
        asset_content_type: application/octet-stream
